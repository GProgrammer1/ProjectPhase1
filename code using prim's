#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <random>
#include <climits>
#include <chrono>
#include <functional>

using namespace std;

// Define the structure for the maze cell
struct Cell {
    int x, y;
    bool walkable;
    Cell* parent;
    int g, h;
    Cell(int x, int y, bool walkable) : x(x), y(y), walkable(walkable), parent(nullptr), g(INT_MAX), h(0) {}

    int f() const { return g + h; }

    // Operator to compare cells by their F cost
    bool operator<(const Cell& other) const {
        return f() > other.f(); // Inverted to make the priority_queue a min-heap
    }
};

// Custom comparator for the priority queue
struct CompareCell {
    bool operator()(const Cell* a, const Cell* b) const {
        return *a < *b;
    }
};

// Heuristic function for A* (Manhattan distance)
int heuristic(const Cell& a, const Cell& b) {
    return abs(a.x - b.x) + abs(a.y - b.y);
}

// Function to reconstruct the path from end to start
vector<Cell> reconstruct_path(Cell* current) {
    vector<Cell> path;
    while (current) {
        path.push_back(*current);
        current = current->parent;
    }
    reverse(path.begin(), path.end());
    return path;
}

// A* search algorithm
vector<Cell> a_star_search(Cell* start, Cell* end, vector<vector<Cell>>& grid) {
    priority_queue<Cell*, vector<Cell*>, CompareCell> open_set;
    unordered_set<Cell*> open_set_items; // To keep track of items in the priority queue
    start->g = 0;
    start->h = heuristic(*start, *end);
    open_set.push(start);
    open_set_items.insert(start);

    while (!open_set.empty()) {
        Cell* current = open_set.top();
        open_set.pop();
        open_set_items.erase(current);

        if (current == end) {
            return reconstruct_path(end);
        }

        // Check all adjacent cells
        static const vector<pair<int, int>> directions = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}}; // Up, Down, Left, Right
        for (const auto& dir : directions) {
            int new_x = current->x + dir.first;
            int new_y = current->y + dir.second;

            if (new_x >= 0 && new_x < grid.size() && new_y >= 0 && new_y < grid[0].size()) {
                Cell* neighbor = &grid[new_x][new_y];
                if (!neighbor->walkable || open_set_items.find(neighbor) != open_set_items.end()) {
                    continue;
                }

                int tentative_g_score = current->g + 1;
                if (tentative_g_score < neighbor->g) {
                    neighbor->parent = current;
                    neighbor->g = tentative_g_score;
                    neighbor->h = heuristic(*neighbor, *end);
                    open_set.push(neighbor);
                    open_set_items.insert(neighbor);
                }
            }
        }
    }

    return vector<Cell>(); // Return an empty path if no path is found
}

// Wall structure for MazeGenerator
struct Wall {
    int row, col, oppositeRow, oppositeCol;
    Wall(int r, int c, int orr, int oc) : row(r), col(c), oppositeRow(orr), oppositeCol(oc) {}
};

// Comparison function for walls
bool comp(const Wall& a, const Wall& b) {
    return a.row + a.col < b.row + b.col; // Corrected comparison logic
}

// MazeGenerator class
class MazeGenerator {
private:
    int rows, cols;
    vector<vector<bool>> maze;
    mt19937 rng;
    pair<int, int> start, end;

    bool isValidCell(int row, int col) const {
        return row >= 0 && row < rows && col >= 0 && col < cols;
    }

public:
    MazeGenerator(int r, int c, unsigned int seed = chrono::system_clock::now().time_since_epoch().count())
        : rows(r), cols(c), maze(rows, vector<bool>(cols, false)), rng(seed) {}

    void generateMaze() {
        priority_queue<Wall, vector<Wall>, function<bool(const Wall&, const Wall&)>> walls(comp);

        // Start from a random cell
        int startRow = uniform_int_distribution<int>(0, rows - 1)(rng);
        int startCol = uniform_int_distribution<int>(0, cols - 1)(rng);
        maze[startRow][startCol] = true;
        start = {startRow, startCol};

        // Add walls of the starting cell to the wall list
        addWalls(startRow, startCol, walls);

        while (!walls.empty()) {
            Wall currentWall = walls.top();
            walls.pop();

            // If the opposite cell is not visited
            if (isValidCell(currentWall.oppositeRow, currentWall.oppositeCol) && !maze[currentWall.oppositeRow][currentWall.oppositeCol]) {
                // Make the wall a passage
                maze[currentWall.row][currentWall.col] = true;
                maze[currentWall.oppositeRow][currentWall.oppositeCol] = true;

                // Add the walls of the opposite cell to the wall list
                addWalls(currentWall.oppositeRow, currentWall.oppositeCol, walls);
            }
        }

        // Set the end point opposite from the start
        end = {rows - 1 - start.first, cols - 1 - start.second};
        maze[end.first][end.second] = true;
    }

    void addWalls(int row, int col, priority_queue<Wall, vector<Wall>, function<bool(const Wall&, const Wall&)>>& walls) {
        const vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (const auto& dir : directions) {
            int newRow = row + dir.first * 2;
            int newCol = col + dir.second * 2;
            int wallRow = row + dir.first;
            int wallCol = col + dir.second;
            if (isValidCell(newRow, newCol)) {
                walls.push(Wall(wallRow, wallCol, newRow, newCol));
            }
        }
    }

    void printMaze() const {
        for (int row = 0; row < rows; ++row) {
            for (int col = 0; col < cols; ++col) {
                cout << (maze[row][col] ? ' ' : '#');
            }
            cout << '\n';
        }
    }

    pair<int, int> getStart() const { return start; }
    pair<int, int> getEnd() const { return end; }
    bool isCellWalkable(int x, int y) const {
        return isValidCell(x, y) && maze[x][y];
    }
};

// Main function
int main() {
    int rows, cols;

    // Prompt the user for the size of the maze
    cout << "Enter the number of rows for the maze: ";
    cin >> rows;
    cout << "Enter the number of columns for the maze: ";
    cin >> cols;

    MazeGenerator generator(rows, cols);
    generator.generateMaze();
    generator.printMaze();

    // Get the start and end points
    auto startCoords = generator.getStart();
    auto endCoords = generator.getEnd();

    // Print the start and end points
    cout << "Start: (" << startCoords.first << ", " << startCoords.second << ")\n";
    cout << "End: (" << endCoords.first << ", " << endCoords.second << ")\n";

    // After generating the maze, create the grid for A*
    vector<vector<Cell>> grid(rows, vector<Cell>(cols, Cell(0, 0, false)));
    for (int x = 0; x < rows; ++x) {
        for (int y = 0; y < cols; ++y) {
            grid[x][y] = Cell(x, y, generator.isCellWalkable(x, y));
        }
    }

    // Define start and end points
    Cell* start = &grid[startCoords.first][startCoords.second];
    Cell* end = &grid[endCoords.first][endCoords.second];

    // Run A* search
    vector<Cell> path = a_star_search(start, end, grid);

    // Output the path
    cout << "Path: ";
    for (const Cell& cell : path) {
        cout << "(" << cell.x << ", " << cell.y << ") ";
    }
    cout << endl;

    return 0;
}
